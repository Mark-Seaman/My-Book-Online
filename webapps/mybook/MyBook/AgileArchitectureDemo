* Agile Software Architecture *

#############################################################################
**Test**
# AgileSoftwareArchitecture demo
demo

# Script your actions
show demo 

# Create a new project context
. tproject
show tproject
rm test/*

# Create a sample application
cp bin/snippets/sling-body1  bin/sling-body
echo 'Example text' | sling-body
show sling-body

# Create a test
tnew  one-slide   'sling-body < data/one-slide'

# Use test commands
trun  one-slide
tout  one-slide
tlike one-slide

# Report the unexpected
tnew  blank-slide 'sling-body < data/blank-slide'

# Test fails
cp bin/snippets/sling-body2  bin/sling-body
trun one-slide
cp bin/snippets/sling-body3  bin/sling-body
tout  one-slide
tlike one-slide

# Run all tests
tst

# Develop a test library
tnew list-test 'ls ..'
tnew tree      'tree'

</pre>

#############################################################################
**Extend**
<pre>

# Fail a test
tnew  multi-line   'sling-body < data/multi-line'
tnew  multi-slides 'sling-body < data/multi-slides'

# Modify code pass a test
cp bin/snippets/sling-body4  bin/sling-body

# Test before commit
#!/bin/bash
# Commit changes if test is good
tst                   
[[ -z "`tfail`" ]]    &&
git add -A .          && 
git commit -m"$1"


# Design a development loop
tnew  two-slides  'sling-body < data/two-slides'

# Change from <slide> to <segment>
# Add <h1> and <p> tags
</pre>

#############################################################################
**Fix**
<pre>

# Test continuously

tst
tout
tlike


# Verify assumptions

ls 
cat
tree
wc
sc-count-records
customers
multi-slides


# Review all failures

tlike customers
growth monitor


# Fix test or product

ls    | remove-exceptions
ls -l | date_filter
ls    | count
sed 's/this/that/'
</pre>



#############################################################################
**Improve**
<pre>

# Find duplication
ew sling-html

# Create a new app for everything (eg. vertical slides)
# Use copy and paste until working
# Find similar parts


# Invoke common part

# Extract function
# Create shared components
# Minimize interconnects


# One thing at a time

# Add library 
# Add header files
# Create headers in output
# Apply external verification


# Leave behind assets


</pre>
